<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>berfr blog</title><link>https://berfr.github.io/</link><description>Recent content on berfr blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 14 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://berfr.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Blogging under GitHub Pages</title><link>https://berfr.github.io/posts/blogging-under-github-pages/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/blogging-under-github-pages/</guid><description>I recently moved my blog from Amazon S3 using a custom domain to GitHub Pages using the default &amp;lt;username&amp;gt;.github.io domain. Here, I&amp;rsquo;ll discuss a few thoughts on this.
What happens when I die One of the reasons I chose to host this blog under GitHub Pages has to do with my eventual death. I like the idea of the articles written here living on after I am gone and this is more likely using a free hosting service.</description></item><item><title>fakesocial: Fake social network using generated content</title><link>https://berfr.github.io/posts/fakesocial/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/fakesocial/</guid><description>Last weekend, I released fakesocial (source code) after working on it for the last few weeks and am pretty pleased with the result. Here, I will discuss a few things about the project.
To start with, fakesocial is a simple social network consisting of fake users which have connections, make posts and also like and comment on these posts. These user profiles use generated images as profile pictures and generated text as posts and comments.</description></item><item><title>watch-diff: Watch command output and get notified on changes</title><link>https://berfr.github.io/posts/watch-diff/</link><pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/watch-diff/</guid><description>For a few months now, I have been using my watch-diff project to get notified on command output changes. The beauty of this simple tool is that it works with any command that can be executed in the shell. This means that once you figure out the exact command you need to monitor, you simply plug it into watch-diff and you automatically get email notifications on updates.
Example: monitoring current releases Here is the output for monitoring the current version of this package on the PyPI website while a release is being made:</description></item><item><title>Deploying to S3 with Sourcehut</title><link>https://berfr.github.io/posts/deploying-s3-sourcehut/</link><pubDate>Wed, 05 Feb 2020 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/deploying-s3-sourcehut/</guid><description>In this article, we will go through the process of automatically building and deploying this Hugo website to Amazon S3 using Sourcehut builds.sr.ht. This post assumes you already have a static website that is hosted on S3; there are plenty of guides online concerning this if it is not the case.
IAM policy for S3 bucket access The first step is to create an IAM user with an IAM policy that can only modify the contents of the specific S3 bucket.</description></item><item><title>Commit history data analysis</title><link>https://berfr.github.io/posts/commit-history-data-analysis/</link><pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/commit-history-data-analysis/</guid><description>In this post, I will describe the ~berfr/commit-history-data-analysis tools and results as well as a few thoughts on version control hosting and commit histories. There are many tools out there with the purpose of extracting insights from single code repositories; this one has the goal of analyzing the many repositories of a single user.
Commit aggregation The main script found in the repository mentioned above simply outputs a git log in comma separated values (CSV) format for all the Git repositories found under a given path and for a specified author.</description></item><item><title>Getting started with the STM32F4 and FreeRTOS</title><link>https://berfr.github.io/posts/getting-started-stm32f4-freertos/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/getting-started-stm32f4-freertos/</guid><description>In this post, I&amp;rsquo;ll simply share a few observations on setting up a FreeRTOS project for the STM32F4 Discovery board. This guide is based on the ~berfr/stm32f4discovery repository which is fully configured and ready to use. The specific commands mentioned in this post are noted in the README or the CMakeLists files of the project.
Hardware The STM32F4 Discovery board has the following core components:
STM32F407VGT6 Microcontroller 32-bit ARM Corex-M4 with FPU Core ARMv7E-M Architecture Thumb-1, Thumb-2, DSP, FPU (Single Precision) instruction sets Single Precision FPU: fpv4-sp-d16 16 MHz High Speed Internal (HSI) RC Oscillator ST-LINK/V2 used for programming and debugging 8 MHz High Speed External (HSE) Oscillator Clock configuration On start up, the 16 MHz internal oscillator is selected as CPU clock.</description></item><item><title>About this blog</title><link>https://berfr.github.io/posts/about-this-blog/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://berfr.github.io/posts/about-this-blog/</guid><description>Throughout the years, I have learned a tremendous amount by reading various blogs on the internet. These are sites I regularly go to or that pop up in search results when researching a specific topic. The information I find useful ranges from low level details to high level wisdom. I believe all these sources are part of my education and I appreciate the authors very much for it. With this blog, I hope to share some ideas and insights so that other people may benefit the way I still do every day.</description></item></channel></rss>